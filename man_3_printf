.TH man 3 "22 July 2022" "1.0" "_printf man page"

.SH NAME

.B _printf

Our version of a custom printf function
.LP
.SH SYNOPSIS
.LP
#include <stdlib.h>
#include <stdarg.h>
#include <stdio.h>
#include <unistd.h>
.LP
int _printf(const char *format, ...);
int print_c(va_list arg);
int print_s(va_list arg);                                          
int print_d(va_list arg);
int print_mod(va_list arg);
int _putchar(char);
int analyzer(const char *format, format_type format_list[], va_list arg);
.LP
.SH DESCRIPTION
.LP
The _printf() function is the main one, has the list of options and functions related to the format received. It also calls the analyzer() function that makes the necesary conditions to apply the format after the symbol '%'. It use format to write the output depending on the control specified by the subsequent arguments converted. 
.LP
There are functions related to the format received, they are: the print_s() function that print the string when format is the string 's', print_c() function that print the character when format is string 'c', print_d() function that print the number when the format is the string 'd' or 'i', print_mod() function that print the symbol '%' when the format is the string '%'.
.LP
Inside the last four functions is the _putchar() function, and inside is the write() fuction that is used to print arguments.
.LP
It is used the va_list and not a variable for the arguments received, it is called the va_arg macro from the functions related to the format and on the main one it is called the va_start and va_end macros.
.LP
.SH Format of the format string
.LP
Format string is a character string.
.LP
.SH Conversion specifiers
.LP
The characters that specifie the type of conversion that is going to be used. The specifiers are:
.LP
.B d, i
.LP
Print a integer
.LP
.B c
.LP
Print a character
.LP
.B s
.LP
Print a string
.LP
.B %
.LP
Print the character '%'
.LP
.SH RETURN VALUE
.LP
On successful return, return the number of characters printed, except for the null byte at the end of the string.
.LP
.SH EXAMPLE
.LP
#include <limits.h>
.LP
#include <stdio.h>
.LP
#include "main.h"
.LP
/**
 * main - Entry point
 * Return: Always 0
 */
 .LP
int main(void)
.LP
{
     int len;
.LP 
     unsigned int ui;
.LP
     void *addr;
.LP
     len = _printf("Let's try to printf a simple sentence.\n");
.LP
     _printf("Length:[%d, %i]\n", len, len);
.LP
     _printf("Negative:[%d]\n", -762534);
.LP
     len = _printf("Percent:[%%]\n");
.LP
     _printf("String:[%s]\n", "I am a string !");
.LP
     _printf("Character:[%c]\n", 'H');
.LP
}
$._printf
Let's try to printf a simple sentence.
.LP
Length:[39, 39]
.LP
Negative:[-762534]
.LP
Percent:[%]
.LP
String:[I am a string !]
.LP
Character:[H]
.LP
$
.LP
.SH BUGS
.LP
No known bugs.
.LP
.SH AUTHOR
.LP
Written by Maria Echeverria, Nicolas Cuevas and Luiyi Hurtado